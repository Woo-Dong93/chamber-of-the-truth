Capabilities: #여러 조직에 분산 된 배포 환경에서 시스템 업그레이드를 관리 할 수 있다.
    Global: &ChannelCapabilities
        V1_3: true
        V1_1: true
    Orderer: &OrdererCapabilites
        V1_1: true
    Application: &ApplicationCapabilites
        V1_3: true
        V1_2: true
        V1_1: true

Organizations:
    - &HFTeam1
      Name: HFTeam1MSP
      ID: HFTeam1MSP
      MSPDir: ./crypto-config/peerOrganizations/HFTeam1/users/Admin@HFTeam1/msp
      AnchorPeers:
          - Host: peer0.HFTeam1
            Port: 7051
      Policies: &HFTeam1Policies
          Readers:
              Type: Signature
              Rule: "OR('HFTeam1MSP.member')"
          Writers:
              Type: Signature
              Rule: "OR('HFTeam1MSP.member')"
          Admins:
              Type: Signature
              Rule: "OR('HFTeam1MSP.admin')"
    - &Ordererorg
      Name: OrdererorgMSP
      ID: OrdererorgMSP
      MSPDir: ./crypto-config/ordererOrganizations/ordererorg/users/Admin@ordererorg/msp/
      Policies: &OrdererorgPolicies
          Readers:
              Type: Signature
              Rule: "OR('OrdererorgMSP.member')"
          Writers:
              Type: Signature
              Rule: "OR('OrdererorgMSP.member')"
          Admins:
              Type: Signature
              Rule: "OR('OrdererorgMSP.admin')"

Orderer: &OrdererDefaults
    OrdererType: solo
    Addresses:
        - orderer0.ordererorg:7050
    Policies: #서명 AND, OR등의 용어를 사용 / 암시적 메타 - 유연성이 떨어짐.
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
    BatchTimeout: 1s #일괄처리 시간 설정
    BatchSize: #일관처리 크기 설정
        MaxMessageCount: 30
        AbsoluteMaxBytes: 99 MB
        PreferredMaxBytes: 512 KB
    kafka:
        Brokers:
            - kafka000:9092
            - kafka001:9092
    Capabilities:
        <<: *OrdererCapabilites
    Organizations:

Channel: &ChannelDefaults
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
    Capabilities:
        <<: *ChannelCapabilities

Application: &ApplicationDefaults
    ACLs: &ACLsDefault # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetConfigTree" function
        cscc/GetConfigTree: /Channel/Application/Readers

        # ACL policy for cscc's "SimulateConfigTreeUpdate" function
        cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

        #---Miscellanesous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Readers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
    Organizations:

Profiles:
    OrdererGenesis: #genesis block 생성을 위한 설정
        Capabilities:
            <<: *ChannelCapabilities
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *Ordererorg
        Consortiums:
            HFTeam1Consortium:
                Organizations:
                    - *HFTeam1
    HFTeam1Channel: #채널 생성을 위한 설정
        Capabilities:
            <<: *ChannelCapabilities
        <<: *ChannelDefaults
        Consortium: HFTeam1Consortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *HFTeam1
            Capabilities:
                <<: *ApplicationCapabilites
